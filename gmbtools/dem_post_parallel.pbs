#PBS -S /bin/bash
#PBS -V
### Note for higher res products, need more memory, use fewer cpus
### Note: parallel cannot efficiently spawn jobs to many nodes if they finish in <30 sec, scale accordingly
##PBS -lselect=64:model=ivy
##PBS -lselect=24:model=has
#PBS -lselect=64:model=bro
##PBS -lselect=4:model=bro
#PBS -lwalltime=2:00:00
#PBS -q devel 
##PBS -q normal 

#To submit:
#qsub ~/src/gmbtools/gmbtools/dem_post_parallel.pbs

#To check progress
#ssh $(qstat -u deshean -W o=+rank0 | tail -n 1 | awk '{print $NF}')
#cd /PBS/spool

#Jobs can fail if stdout or stderr are >200MB
#Turn off automatic ls after cd
unset -f cd

#Set resource limits for max open files, no core dumps
ulimit -S -n 65536 -c 0

export GDAL_MAX_DATASET_POOL_SIZE=32768

#The ls -H here dereferences links
#Can shuffle sizes with `shuf` utility

#WVGE
#topdir=/nobackup/deshean/hma/dem_coreg
#ASTER
#topdir=/nobackup/deshean/hma/aster/dsm
#Combined
topdir=/nobackup/deshean/hma/combined_aster_wv

#CONUS
#refdem=/nobackup/deshean/data/nasadem/conus/hgt_merge/hgt/conus_nasadem_hgt_merge_hgt_adj.vrt
#topdir=/nobackup/deshean/conus_combined/dem_coreg_nasadem

cd $topdir

###
### Prepare stacks for each RGI polygon
###

#See rgi_dem_trend.py notes on generating shp
dem_shp_list=""

#ASTER
#dem_shp_list+='dem_align_ASTER_round2_index_2000-2018_aea.shp'
#dem_shp_list+=' dem_align_ASTER_round2_index_2000-2009_aea.shp'
#dem_shp_list+=' dem_align_ASTER_round2_index_2009-2018_aea.shp'
#WV
#dem_shp_list+='dem_align_WV_index_2007-2018_aea.shp'
#Combined
#dem_shp_list+='dem_align_ASTER_WV_index_2000-2018_aea.shp'
dem_shp_list+=' dem_align_ASTER_WV_index_2000-2009_aea.shp'
dem_shp_list+=' dem_align_ASTER_WV_index_2009-2018_aea.shp'

a1=0.0
a2=2.0
a3=9999.0

for shp in $dem_shp_list
do
    if [ ! -d ${shp%.*}_stack ] ; then
        mkdir -pv ${shp%.*}_stack
        mkdir -pv ${shp%.*}_stack/log
    fi

    #Smaller glaciers
    cmd_fn=${shp%.*}_${a1}-${a2}_km2_stack_cmd.sh
    if [ ! -e $cmd_fn ] ; then
        rgi_dem_trend.py $shp $a1 $a2
    fi

    ##Remove lines longer than 32762 - not an issue for shorter periods
    #longlines=$(awk '{ if ( length($0) > 32762 ) { print NR } }' $cmd_fn)
    #longlines_sed=$(echo $longlines | sed -e 's/ /d;/g' -e 's/$/d/')
    #echo -n > ${cmd_fn%.*}_longlines.sh
    #for i in $longlines; do sed -n "${i}p" $cmd_fn >> ${cmd_fn%.*}_longlines.sh ; done 
    #sed -i.bak -e "$longlines_sed" $cmd_fn

    #If recovering from unfinished
    first=$(head -1 $cmd_fn | awk -F'stack_fn' '{print $2}' | awk '{print $1}')
    if [ -e $first ] ; then 
        missing=${cmd_fn%.*}_missing.sh
        echo -n > $missing
        #This will isolate npz filenames from cmd_fn
        ##parallel "if ! ls -U {}/*npz >/dev/null 2>&1 ; then rm -v {}; grep {} $cmd_fn >> $missing ; fi" ::: ${shp%.*}_stack/1*
        awk -F'stack_fn' '{print $2}' $cmd_fn | awk '{print $1}' | parallel "if ! ls -U {} > /dev/null 2>&1 ; then grep {} $cmd_fn >> $missing ; fi"
    else
        missing=$cmd_fn
    fi
   
    #If missing is not empty
    if [ -s $missing ] ; then 
        parallel --workdir $topdir -j 28 --sshloginfile $PBS_NODEFILE < $missing
    fi

    #Larger glaciers
    cmd_fn=${shp%.*}_${a2}-${a3}_km2_stack_cmd.sh
    if [ ! -e $cmd_fn ] ; then
        rgi_dem_trend.py $shp $a2 $a3
    fi

    first=$(head -1 $cmd_fn | awk -F'stack_fn' '{print $2}' | awk '{print $1}')
    if [ -e $first ] ; then
        missing=${cmd_fn%.*}_missing.sh
        echo -n > $missing
        awk -F'stack_fn' '{print $2}' $cmd_fn | awk '{print $1}' | parallel "if ! ls -U {} > /dev/null 2>&1 ; then grep {} $cmd_fn >> $missing ; fi"
    else
        missing=$cmd_fn
    fi

    if [ -s $missing ] ; then 
        parallel --workdir $topdir -j 4 --sshloginfile $PBS_NODEFILE < $missing
    fi

    #If interrupted
    #echo -n > ${shp%.*}_stack/missing_trend.txt
    #for i in ${shp%.*}_stack/*/*mean.tif; do if [ ! -e $(echo $i | sed 's/_mean.tif/.npz/') ] ; then echo $i >> ${shp%.*}_stack/missing_trend.txt; fi; done
    #list=$(cat ${shp%.*}_stack/missing_trend.txt | awk -F'/' '{print $2}')
    #echo -n > ${cmd_fn%.*}_missing.sh
    #for i in $list; do grep "${shp%.*}_stack/$i" $cmd_fn >> ${cmd_fn%.*}_missing.sh ; done
    #cmd_fn=${cmd_fn%.*}_missing.sh
    #parallel --workdir $topdir -j 2 --sshloginfile $PBS_NODEFILE < $cmd_fn

    #cd ${shp%.*}_stack
    #Clip trend to RGI polygons
    #parallel --workdir $topdir/${shp%.*}_stack --sshloginfile $PBS_NODEFILE 'if [ ! -e {.}_shpclip.tif ] ; then ~/src/pygeotools/pygeotools/clip_raster_by_shp.py -extent raster {} rgi ; fi' ::: 15.*/*trend.tif
    #parallel --workdir $topdir/${shp%.*}_stack --sshloginfile $PBS_NODEFILE '~/src/pygeotools/pygeotools/clip_raster_by_shp.py -extent raster {} rgi' ::: [0-9]*/*trend.tif

done
